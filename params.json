{"name":"CLIP-seq Toolkit","tagline":"home-made toolkit","body":"# Repository Purpose\r\n\r\nCLIP-seq can globally report all the binding positions of RNA binding proteins, like PTB, FOX, etc. The key is to identify the sites where proteins and RNA are bound with high affinity and strength, a.k.a peak finding. Lots of Chip-seq tools had been utilized to find peak of CLIP-seq as both Chip-seq and CLIP-seq scan protein-nucleic interaction sites [1]. Here represents the bio-informatics Perl script to do the job. It absorbs and incorporates methods at _silico_ CLIP-seq (by Darnell) [2] and modified FDR methods at PTB CLIP-seq (by Xue) [3]. \r\n\r\nIn the future, I will git_push more home-made codes for CLIP-seq analysis. \r\n\r\n# Brief Introduction for pipeline\r\n\r\n## Peak Finding\r\n\r\n![Cubic Spline Interploration](https://raw.github.com/Puriney/CLIPseqToolkit/master/figures/cubicsmoothspline-maxium-minimum.png)\r\n\r\nCubic spline interploration is used in Darnell paper to identify the CLIP-seq signal maximum site, which potentially indicates the binding peaks. In the figure, the black dots denote the raw signal value (hight) and the blue curve is the fitting curve. The red one with dots is derivative curve. When the derivative equals zero, this site indicates max or min site, and furthermore the maximum site can be filtered. \r\n\r\nCubic spiline interploration for peak finding is implemented by `PeakFindingBySpline.pl`. \r\n\r\n## Threshold before peak finding\r\n\r\nThe principle is same to Darnel method. For each gene, I assign all the reads for given gene to random positions in order to find the maximum value in random scenario, thus real observed/experimental peak whose height is lower than random/dummy peak is expected to be noise peak that should be excluded. \r\n\r\nThreshold before peak finding is implemented by `threshold_each_gene_multiple_expriments.pl`. \r\n\r\n# Dependencies\r\n\r\nIn `PeakFindingBySpling.pl`, Perl package `Statistics::R` is needed, because my Perl script employes R functions. \r\n\r\nThe funny thing is R script runs for 104.948s, while Perl script runs only for 5.028s when I deal with exactly same test genes. The principle and core idea of the R script ( I may git push it the other day) is same to this Perl script. In addition, I avoid using `for` or `while` loop (Explicit Loop in R) which are killer for R codes. Perhaps I should try some bioconductor packaged when dealling with large amounts of genes. It gives a feeling that my R script works like `foreach` in Perl thus it is not efficienty as in perl `foreach` loop is highly prohibited in my `vim`. Neverthless, this Perl script calling R function really works.\r\n\r\n# Refs\r\n1. Althammer, Sonja, et al. \"Pyicos: A versatile toolkit for the analysis of high-throughput sequencing data.\" Bioinformatics 27.24 (2011): 3333-3340.\r\n2. Chi, Sung Wook, et al. \"Argonaute HITS-CLIP decodes microRNAâ€“mRNA interaction maps.\" Nature 460.7254 (2009): 479-486.\r\n3. Xue, Yuanchao, et al. \"Genome-wide analysis of PTB-RNA interactions reveals a strategy used by the general splicing repressor to modulate exon inclusion or skipping.\" Molecular cell 36.6 (2009): 996-1006.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}